from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters
from database.SQLighter import *
import logging
from random import shuffle, choice
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from config import *

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

ENTER_USERNAME, MENU, PLAY_BIG_QUIZ = range(3)

menu_keyboard = [['–ë–æ–ª—å—à–∞—è\n–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞üìö', '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—åüöÄ'], ['–†–µ–π—Ç–∏–Ω–≥üìä', '–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—Éüóë']]

RIGHT_ANSWERS = [
    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ\n', '–¢—ã –ø—Ä–∞–≤‚úÖ\n', '–¢–æ—á–Ω–æ‚úÖ\n', '–ú–æ–ª–æ–¥–µ—Ü, –ø—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ\n'
]

WRONG_ANSWERS = [
    '–¢—ã –æ—à–∏–±—Å—è‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
    '–ê –≤–æ—Ç –∏ –Ω–µ—Ç‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
    '–û—à–∏–±–æ—á–∫–∞‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
    '–ù–µ–µ–µ–µ—Ç‚ùå\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ',
]


def generate_leaderboard(top, user, place):
    leadeboard = '–¢–û–ü-10:\n\n'
    print(*zip(range(1, len(top) + 1), top))
    leadeboard += '\n'.join(
        list(map(lambda x: '{}.\t{}\t{}'.format(x[0], x[1][1][:10], x[1][2]), zip(range(1, len(top) + 1), top))))
    print(place)
    if user not in top:
        leadeboard += '\n...\n{}. {} {}'.format(place, user[1], user[2]) + '(–≤—ã)'

    return leadeboard


def error(bot, update, error):
    logger.warning('Update "%s" caused error "%s"', update, error)
    bot.send_message(191038878, text='Update "{}" caused error "{}"'.format(update, error))


def start(bot, update, user_data):
    user = update.message.from_user

    user_info = 'id: {}\nusername: {}\nfirst_name: {}\nlast_name: {}'.format(
        update.message.from_user.id, update.message.from_user.username,
        update.message.from_user.first_name, update.message.from_user.last_name
    )
    bot.send_message(191038878, text='–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª:\n{}'.format(user_info))

    db_worker = SQLighter(DATABASE_NAME)
    all_users = db_worker.select_all('users')
    all_tasks = db_worker.select_all('tasks')

    shuffle(all_tasks)
    user_data['all_tasks'] = iter(all_tasks)
    user_data['uid'] = user.id
    user_data['streak'] = 0
    db_worker.close()

    is_registered = list(filter(lambda x: x[0] == user.id, all_users))

    if is_registered:
        update.message.reply_text(
            f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {is_registered[0][1]}! –ì–æ—Ç–æ–≤ –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —É–¥–∞—Ä–µ–Ω–∏—è—Ö? –¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!',
            reply_markup=ReplyKeyboardMarkup(menu_keyboard)
        )

        return MENU
    else:

        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ù–∞–¥–µ—é—Å—å —Ç—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –≤—Å–µ –ø—Ä–æ—Å—Ç–æ, —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è –≤ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞—Ä–µ–Ω–∏–π '
            '–≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø—Ä–∏ –ø–æ–º–æ—â–∏ @WhereIsTheStressBot',
            reply_markup=ReplyKeyboardRemove()
        )
        update.message.reply_text(
            '–ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ (—Ä–µ–π—Ç–∏–Ω–≥–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ',
            reply_markup=ReplyKeyboardRemove()
        )

        return ENTER_USERNAME


def enter_username(bot, update, user_data):
    user = update.message.from_user
    username = update.message.text

    db_worker = SQLighter(DATABASE_NAME)
    user_data['username'] = username

    db_worker.add_user(user.id, username)
    db_worker.close()

    update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, {username}, —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...',
                              reply_markup=ReplyKeyboardMarkup(menu_keyboard))
    return MENU


def send_next_big_quiz(bot, update, user_data):
    try:
        current_task = next(user_data['all_tasks'])
        user_data['current_task'] = current_task

        update.message.reply_text(f'–ì–¥–µ —Å—Ç–∞–≤–∏—Ç—Å—è —É–¥–∞—Ä–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–µ {current_task[0]}?',
                                  reply_markup=ReplyKeyboardMarkup([[current_task[1]], [current_task[2]], ['–í–µ—Ä–Ω—É—Ç—å—Å—è '
                                                                                                           '–≤ –º–µ–Ω—é']]))
    except StopIteration:
        pass


def answer_checking_big_quiz(bot, update, user_data):
    word, o1, o2, right_answer = user_data['current_task']
    answers = [o1, o2]
    user_answer = update.message.text
    print(update.message.text)
    db_worker = SQLighter(DATABASE_NAME)

    if update.message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        update.message.reply_text('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', reply_markup=ReplyKeyboardMarkup(menu_keyboard))
        return MENU

    elif user_answer == answers[right_answer]:

        update.message.reply_text(choice(RIGHT_ANSWERS) + f'–°–ª–µ–¥—É–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å "{answers[right_answer]}"')
        user_data['streak'] += 1
        add = 1

        if user_data['streak'] % 5 == 0:
            update.message.reply_text(f"–û–≥–æ, –∞ –≤–æ—Ç –∏ {user_data['streak']} –ø–æ–¥—Ä—è–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
            add = user_data['streak']

        db_worker.change_value_user(user_data['uid'], add)
        db_worker.close()
    else:
        update.message.reply_text(choice(WRONG_ANSWERS) + answers[right_answer])
        db_worker.change_value_user(user_data['uid'], -1)
        db_worker.close()
        user_data['streak'] = 0
    send_next_big_quiz(bot, update, user_data)


def main_menu(bot, update, user_data):
    text = update.message.text
    if text == menu_keyboard[0][0]:
        update.message.reply_text(
            '–ë–æ–ª—å—à–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞:\n1) –ù–µ—Ç —Ç–∞–π–º–µ—Ä–∞\n2) –û—á–µ–Ω—å –º–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏–π \n3) –ó–∞ '
            '–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '
            '—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +1/-1 –±–∞–ª–ª\n4) –ó–∞ –ø—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å +5 –±–∞–ª–ª–æ–≤, –∑–∞ –¥–µ—Å—è—Ç—å - +10 –∏ —Ç.–¥.')
        send_next_big_quiz(bot, update, user_data)
        return PLAY_BIG_QUIZ

    elif text == menu_keyboard[0][1]:
        update.message.reply_text(
            '–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –º—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è!')

    elif text == menu_keyboard[1][0]:
        db_worker = SQLighter(DATABASE_NAME)
        all_users = sorted(db_worker.select_all('users'), key=lambda x: x[2], reverse=True)
        my_result = list(filter(lambda x: x[0] == user_data['uid'], all_users))[0]
        my_place = all_users.index(my_result) + 1
        best_10_results = all_users[:10]

        update.message.reply_text(generate_leaderboard(best_10_results, my_result, my_place))
        db_worker.close()

    elif text == menu_keyboard[1][1]:
        db_worker = SQLighter(DATABASE_NAME)
        db_worker.delete_user(user_data['uid'])
        del user_data['all_tasks']
        db_worker.close()
        update.message.reply_text('–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ - –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start',
                                  reply_markup=ReplyKeyboardMarkup([['/start']]))
        return -1
    else:
        update.message.reply_text('–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é:(', reply_markup=ReplyKeyboardMarkup(menu_keyboard))


def main():
    updater = Updater(TOKEN)

    dp = updater.dispatcher
    dp.add_error_handler(error)

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start, pass_user_data=True),
                      MessageHandler(Filters.text, start, pass_user_data=True)],

        states={
            ENTER_USERNAME: [MessageHandler(Filters.text, enter_username, pass_user_data=True)],
            MENU: [MessageHandler(Filters.text, main_menu, pass_user_data=True)],
            PLAY_BIG_QUIZ: [MessageHandler(Filters.text, answer_checking_big_quiz, pass_user_data=True)],
        },
        fallbacks=[CommandHandler('restart', start, pass_user_data=True)]
    )
    dp.add_handler(conversation_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
